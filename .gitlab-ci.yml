# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc:latest

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script: 
  #   - apt update && apt -y install make autoconf 
  before_script: 
    - apt update && apt -y install fossil make
    - mkdir ~/sqlite
    - cd ~/sqlite
    - fossil clone https://www.sqlite.org/src sqlite.fossil
    - fossil open sqlite.fossil
    - mkdir bld                ;#  Build will occur in a sibling directory
    - cd bld                   ;#  Change to the build directory
    - chmod +x ../sqlite/configure
    - ../sqlite/configure      ;#  Run the configure script
    - make                     ;#  Run the makefile.
    - make sqlite3.c           ;#  Build the "amalgamation" source file
    - make test                ;#  Run some tests (requires Tcl)
  script: 
    - chmod +x ./compile.sh
    - ./compile.sh
  artifacts:
    paths:
      - sia_configure_compiler
      - sia_prepare_database
      - tkn_inject_file
      - tkn_tokenize
      - stx_detect_types
      - stx_detect_functions
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
# test:
#   stage: test
#   script:
#     - ./runmytests.sh
